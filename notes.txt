Schedule :
    Commence    : 9:30 AM
    Tea Break   : 11:00 AM (20 mins)
    Lunch Break : 1:00 PM (1 Hr)
    Tea Break   : 3:30 PM (20 mins)
    End         : 5:30 PM

Methodology :
    No powerpoints
    Discussion & Code Demonstration

Prerequisites :
    Familiar with Golang

About You
    Name
    Total Experience
    Primary skillset
    Experience in Golang 
    Any interesting books / tv shows you read / watched recently
    If you attended my golang training


Earth at night
    
Testing & Mocking
Error Handling Best Practices


Concurrency in Golang

Channel read is a blocking operation (except in a 'select' construct)
Channel write operation is also a blocking operation
    Write operation can succeed ONLY if a read operation is initiated (unless the channel is a buffered channel)
    Delivery of the data is guaranteed

func fn(){
    ...
    go f1()
    time.Sleep(20 * time.Second)
    ........
    
    x := <- ch
    
    ........
}

func f1(){
    ch <- 100
}

func fn(){
    select {
        case x:= <- ch:
            ...
        case <- time.After(time.Second):
            ...
        default:
            ...
    }
}

Higher Order Functions
    1. A function can be assigned as a value to a variable
    2. A function can be passed as an argument to a function
    3. A function can be returned by another function

Closures


https://www.cyberciti.biz/faq/unix-kill-command-examples/

Pooling

Http Services
    1. Using the net/http package
    2. Using the thirdparty routers
        a. httprouter
        b. gorilla-mux
    3. web frameworks

net/http package
    APIs for building both server & client

    
Higher Order Functions
    1. A function can be assigned as a value to a variable
    2. A function can be passed as an argument to a function
    3. A function can be returned by another function


Web Socket
    github.com/gorilla/websocket

RPC (Remote Procedure Call)
    .Net Remoting
    RMI

Remote
    Sockets
Local
    Named Pipes
    Sockets


RDBMS (Transactions) (Update optimized)
    Normalization (Integrity of the data is maintained DURING UPDATES)
        Avoid duplication (reduce redundancy)
        Updates

    Cost of Normalization
        READS are costly

Table-1
    P101, Pencil

Table-2
    P101, Pencil

1. Read Optimized (data is never updated)
2. Analytical
3. Read optimized (append only + very very few updates)
4. Realtime 

GRPC
    Data serialization & deserialization - protocol buffers
    Communication Patterns
        1. Request & Response
        2. Server Streaming (One request from client & stream of responses from the server)
        3. Client Streaming (stream of requests from client & one response from the server)
        4. Bidirectional Streaming (stream of requests from client & stream of responses from the server)
    
Define the message format
Define the service
Generate the proxy & the stub

Tools for generating proxy & stub
    protoc-gen-go
    protoc-gen-go-grpc

Installation
    go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
    go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest

    OR

    brew install protoc-gen-go
    brew install protoc-gen-go-grpc

    OR
    Install the binaries from    

command line tool
    protoc

To create the proxy & stub
    protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative proto/service.proto


Code Generation
    AST
    Templates

    To generate code
        go generate ./...